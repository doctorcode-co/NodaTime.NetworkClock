{"name":"Nodatime.NetworkClock","tagline":"An SNTP-based clock for Noda Time","body":"NodaTime.NetworkClock\r\n=====================\r\n\r\nA `NodaTime.IClock` implementation that gets the current time from an NTP server instead of the computer's local clock.\r\n\r\n```\r\nPM> Install-Package NodaTime.NetworkClock\r\n```\r\n\r\nExample Usage:\r\n\r\n```csharp\r\n// Just like SystemClock, you can obtain a singleton instance\r\nvar clock = NetworkClock.Instance;\r\n\r\n// Optionally, you can adjust some settings.\r\n// These are the defaults, and can be omited if you aren't going to change them.\r\nclock.NtpServer = \"pool.ntp.org\";              // which server to contact\r\nclock.CacheTimeout = Duration.FromMinutes(15); // how long between calls to the server\r\n\r\n// Call .Now to get the current time\r\nInstant now = clock.Now;\r\n\r\n// Like any clock, you can then convert to the local time zone\r\nDateTimeZone tz = DateTimeZoneProviders.Tzdb[\"America/New_York\"];\r\nZonedDateTime zdt = now.InZone(tz);\r\n\r\n// Of course, you can convert this to whatever format makes sense in your application.\r\n// You can use any of the following:\r\nLocalDateTime ldt = zdt.LocalDateTime;\r\nOffsetDateTime odt = zdt.ToOffsetDateTime();\r\nDateTimeOffset dto = zdt.ToDateTimeOffset();\r\nDateTime dt = zdt.ToDateTimeUnspecified();\r\n```\r\n\r\nNote that technically, the implementation is currently just \"SNTP\", as it doesn't account for the delay in retrieving the time, and it only makes a single query to the server.   I will probably update it to a full NTP client at some point.  (PR's are welcome!)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}